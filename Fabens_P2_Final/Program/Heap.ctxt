#BlueJ class context
comment0.target=Heap
comment0.text=\r\n\ Heap,\ converted\ from\ lab\ assignment,\ which\ in\ turn\ used\ clss\ notes\r\n\r\n\ @author\ Peter\ Fabens\r\n\ @version\ 4/14/2022\r\n
comment1.params=
comment1.target=Heap()
comment1.text=\r\n\ Default\ Constructor\r\n
comment10.params=
comment10.target=Heap\ dupe()
comment10.text=\r\n\ Does\ a\ deep\ copy\ of\ the\ Heap,\ which\ is\ inefficient\ but\ sometimes\ useful\r\n
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\r\n\ Print\ heap\ in\ space-separated\ values\r\n
comment2.params=
comment2.target=void\ rebuild()
comment2.text=\r\n\ Fully\ reorders\ the\ heap,\ since\ values\ change\ as\ trucks\ move\r\n
comment3.params=
comment3.target=boolean\ empty()
comment4.params=
comment4.target=java.lang.Comparable\ peek()
comment4.text=\r\n\ Read\ the\ top\ item\ off\ the\ heap\ and\ return\ it,\ without\ removing\ it\ from\ heap.\r\n
comment5.params=
comment5.target=java.lang.Comparable\ pull()
comment5.text=\r\n\ Take\ the\ top\ item\ off\ the\ heap\ and\ return\ it\r\n
comment6.params=item
comment6.target=boolean\ add(java.lang.Comparable)
comment6.text=\r\n\ Add\ an\ item\ to\ the\ heap\r\n\ \r\n\ @param\ item\ item\ to\ add\r\n\ @returns\ whether\ it\ worked\r\n
comment7.params=
comment7.target=LinkedList\ sort()
comment7.text=\r\n\ Return\ a\ LinkedList\ representation\ of\ the\ heap\ data,\ sorted\r\n
comment8.params=nodeIndex
comment8.target=void\ percolate_up(int)
comment8.text=\r\n\ Prof.\ Pfaffmann's\ code\ for\ percolating\ a\ node\ up\ the\ heap.\r\n\ \r\n\ @param\ nodeIndex\ index\ of\ node\ to\ percolate\r\n
comment9.params=nodeIndex
comment9.target=void\ percolate_down(int)
comment9.text=\r\n\ Only\ slightly\ modified\ from\ class\ notes,\ so\ credit\ goes\ to\ Prof.\ Pfaffmann\r\n\ \r\n\ @param\ nodeIndex\ index\ of\ node\ to\ percolate\ down\ through\ heap\r\n
numComments=12
